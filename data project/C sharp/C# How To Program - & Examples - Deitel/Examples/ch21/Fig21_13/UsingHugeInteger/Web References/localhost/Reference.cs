//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3328.4
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 1.0.3328.4.
// 
namespace UsingHugeInteger.localhost {
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="HugeIntegerSoap", Namespace="http://www.deitel.com/csphtp1/ch21/")]
    public class HugeInteger : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        /// <remarks/>
        public HugeInteger() {
            this.Url = "http://localhost/HugeInteger/HugeInteger.asmx";
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.deitel.com/csphtp1/ch21/Add", RequestNamespace="http://www.deitel.com/csphtp1/ch21/", ResponseNamespace="http://www.deitel.com/csphtp1/ch21/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Add(string first, string second) {
            object[] results = this.Invoke("Add", new object[] {
                        first,
                        second});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAdd(string first, string second, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Add", new object[] {
                        first,
                        second}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndAdd(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.deitel.com/csphtp1/ch21/Subtract", RequestNamespace="http://www.deitel.com/csphtp1/ch21/", ResponseNamespace="http://www.deitel.com/csphtp1/ch21/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Subtract(string first, string second) {
            object[] results = this.Invoke("Subtract", new object[] {
                        first,
                        second});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSubtract(string first, string second, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Subtract", new object[] {
                        first,
                        second}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndSubtract(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.deitel.com/csphtp1/ch21/Bigger", RequestNamespace="http://www.deitel.com/csphtp1/ch21/", ResponseNamespace="http://www.deitel.com/csphtp1/ch21/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Bigger(string first, string second) {
            object[] results = this.Invoke("Bigger", new object[] {
                        first,
                        second});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginBigger(string first, string second, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Bigger", new object[] {
                        first,
                        second}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndBigger(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.deitel.com/csphtp1/ch21/Smaller", RequestNamespace="http://www.deitel.com/csphtp1/ch21/", ResponseNamespace="http://www.deitel.com/csphtp1/ch21/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Smaller(string first, string second) {
            object[] results = this.Invoke("Smaller", new object[] {
                        first,
                        second});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSmaller(string first, string second, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Smaller", new object[] {
                        first,
                        second}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndSmaller(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.deitel.com/csphtp1/ch21/EqualTo", RequestNamespace="http://www.deitel.com/csphtp1/ch21/", ResponseNamespace="http://www.deitel.com/csphtp1/ch21/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool EqualTo(string first, string second) {
            object[] results = this.Invoke("EqualTo", new object[] {
                        first,
                        second});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEqualTo(string first, string second, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EqualTo", new object[] {
                        first,
                        second}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndEqualTo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
    }
}
